SOLID

SOLID é um acrônimo dos princípios da programação orientada a objetos descritas por Robert C. Martin ("Uncle Bob").
Auxiliam o programador a escrever códigos mais limpos, facilitando a refatoração e estimulando o reaproveitamento do código.

Single responsibility principle - Princípio da responsabilidade única.
Open closed principle - Princípio aberto fechado.
Liskov substitution principle - Princípio da substituição de Liskov.
Interface segregation principle - Princípio da segregação da interface.
Dependency inversion principle - Princípio da inversão da dependência.

--------------------------------------------------------------------------------------------------------------------
Single responsibility principle
Uma classe deve ter um, e somente um, motivo para mudar.
 - A classe dever possuir uma única responsabilidade dentro do software.

--------------------------------------------------------------------------------------------------------------------
Open closed principle
Você deve poder estender um comportamento de classe, sem modificá-lo.
 - Objetos devem estar abertos para extensão, mas fechados para modificação.
 - Quando novos comportamentos precisam ser adicionados, no software, devemos estender e não alterar o código fonte original.

--------------------------------------------------------------------------------------------------------------------
Liskov substitution principle
Classes derivadas devem ser substituíveis por suas classe base.
 - O princípio da substituição de Liskov foi introduzido por Barbara Liskov em 1987.
"Se para cada objeto o1 do tipo S há um objeto o2 do tipo T, de forma que, para todos os programas P, o comportamento de P é inalterado quando o1 é substituído por 02, então S é um subtipo de T."

--------------------------------------------------------------------------------------------------------------------	
Interface segregation principle
Faça interfaces refinadas que são específicas do cliente.
 - Uma classe não deve ser forçada a implementar interfaces e métodos que não serão utilizadas.
 - É melhor criar interfaces mais específicas ao invés de termos uma única interface genérica.

--------------------------------------------------------------------------------------------------------------------
Dependency inversion principle
Dependa de abstrações e não de implementações.
 - Um módulo de alto nível não deve depender de módulos de baixo nível, ambos devem depender da abstração.
 - PS : Inversão de dependência não é igual a Injeção de dependência.
