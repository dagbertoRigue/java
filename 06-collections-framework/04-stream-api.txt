========================================================================================================
Classe anônima
A classe anônima em Java é uma classe não recebeu um nome e é tanto declarado e instanciado em uma única instrução. Você deve considerar o uso de uma classe anônima sempre que você precisa para criar uma classe que será instanciado apenas uma vez. 

========================================================================================================
Functional Interface
Qualquer interface com um SAM (Single Abstract Method) é uma interface funcional e sua implementação pode ser tratada como expressões lambda.
Interfaces funcionais :
Comparator
Consumer
Function
Predicate

Exemplo 1 (com notação FunctionalInterface) : 
@FunctionalInterface
public interface Comparator<T> {
	@Contract(pure=true)int compare(T var1, t var2);
}

Exemplo 2 (sem notação FunctionalInterface) :
public interface ActionListener extends EventListener {
	void actionPerformed(ActionEvent var1);
}

========================================================================================================
Lambda
Uma função lambda é uma função sem declaração, isto é, não é necessário colocar um nome, um tipo de retorno e o modificador de acesso. A ideia é que o método seja declarado no mesmo lugar em que será usado. As funções lambda em Java tem a sintaxe definida como (argumento) -> (corpo). 

========================================================================================================
Method Reference 
Method Reference é um novo recurso do Java 8 que permite fazer referência a um método ou construtor de uma classe (de forma funcional) e assim indicar que ele deve ser utilizado num ponto específico do código, deixando-o mais simples e legível . Para utilizá-lo, basta informar uma classe ou referência seguida do símbolo “::” e o nome do método sem os parênteses no final. 

========================================================================================================
Streams API 
A Streams API traz uma nova opção para a manipulação de coleções em Java seguindo os princípios da programação funcional. Combinada com as expressões lambda, ela proporciona uma forma diferente de lidar com conjuntos de elementos, oferecendo ao desenvolvedor uma maneira simples e concisa de escrever código que resulta em facilidade de manutenção e paralelização sem efeitos indesejados em tempo de execução. 

Existem dois tipos de operações, as operações intermediárias e as operações terminais.
As operações intermediárias retornam um Stream que podemos encadear uma após a outra. 
As operações terminais podemos utilizar apenas uma por vez, pois não permitem ser encadeadas. Retornam um objeto ou um valor.

========================================================================================================